<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yoder Bacon]]></title>
  <link href="http://trayo.github.io/atom.xml" rel="self"/>
  <link href="http://trayo.github.io/"/>
  <updated>2016-05-17T20:15:07-07:00</updated>
  <id>http://trayo.github.io/</id>
  <author>
    <name><![CDATA[Travis Yoder]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Customizing Pry]]></title>
    <link href="http://trayo.github.io/blog/2015/05/23/customizing-pry/"/>
    <updated>2015-05-23T10:20:31-07:00</updated>
    <id>http://trayo.github.io/blog/2015/05/23/customizing-pry</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to be showing off a couple different ways that I customized the <a href="https://github.com/pry/pry">pry gem</a>.</p>

<p>You&rsquo;ll need to add a <code>.pryrc</code> file to your root directory. You can do it with this command: <code>touch ~/.pryrc</code>.</p>

<h2>Block Commands</h2>

<p>Pry block commands are a way for you to add shortcuts to every pry session.</p>

<p>The first one I set up was for the built in <code>play</code> method that pry supports. I found myself copying lines of code from a <code>binding.pry</code> breakpoint that I was in and pasting them line by line to see the result of the output. This can be slow and painful when there&rsquo;s a lot of code in a method.</p>

<p>The <code>play</code> command allows you to play a line of code or lines of code using a range of numbers, using the flag <code>-l</code>. Here is an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>=&gt; 1: require "pry"; binding.pry
</span><span class='line'>   2:
</span><span class='line'>   3: p "Hello #{name}"
</span><span class='line'>   4: p "Konichiwa #{name}"
</span><span class='line'>   5: p "Hola #{name}"
</span><span class='line'>   6:
</span><span class='line'>
</span><span class='line'>[1] pry (main)&gt; play -l 3
</span><span class='line'>NameError: undefined local variable or method `name' for main:Object
</span><span class='line'>from (pry):1:in `&lt;main&gt;'
</span><span class='line'>
</span><span class='line'>[2] pry (main)&gt; name = "travis"
</span><span class='line'>=&gt; "travis"
</span><span class='line'>
</span><span class='line'>[3] pry (main)&gt; play -l 3
</span><span class='line'>"Hello travis"
</span><span class='line'>=&gt; "Hello travis"
</span><span class='line'>
</span><span class='line'>[4] pry (main)&gt; name = "Solid Snake"
</span><span class='line'>=&gt; "Solid Snake"
</span><span class='line'>
</span><span class='line'>[5] pry (main)&gt; play -l 3..5
</span><span class='line'>"Hello Solid Snake"
</span><span class='line'>"Konichiwa Solid Snake"
</span><span class='line'>"Hola Solid Snake"
</span><span class='line'>=&gt; "Hola Solid Snake"</span></code></pre></td></tr></table></div></figure>


<p>This is where block commands come in to play. I wanted to make it slightly easier to type <code>play -l</code> so I added this to my <code>.pryrc</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Pry::Commands.block_command 'pl', "Alias for 'play -l'" do |lines|
</span><span class='line'>  _pry_.run_command("play -l #{lines}")
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><code>Pry::Commands.block_command 'pl'</code> says to make a command with the name &lsquo;pl&rsquo;.<br/>
<code>"Alias for 'play -l'"</code> is a description of the command.<br/>
You can have the method take parameters with <code>do |lines|</code>.<br/>
<code>_pry_.run_command</code> uses the current pry instance to run a pry command.<br/>
And then we tell it to run the <code>play -l</code> command with a line or range of lines.</p>

<p><em>Note: the code within the block is actually plain ruby code</em></p>

<p>Now in our example we can do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>=&gt; 1: require "pry"; binding.pry
</span><span class='line'>   2:
</span><span class='line'>   3: p "Hello #{name}"
</span><span class='line'>   4: p "Konichiwa #{name}"
</span><span class='line'>   5: p "Hola #{name}"
</span><span class='line'>   6:
</span><span class='line'>
</span><span class='line'>[1] pry (main)&gt; pl 3
</span><span class='line'>NameError: undefined local variable or method `name' for main:Object
</span><span class='line'>from (pry):1:in `&lt;main&gt;'
</span><span class='line'>
</span><span class='line'>[2] pry (main)&gt; name = "Liquid Snake"
</span><span class='line'>=&gt; "Liquid Snake"
</span><span class='line'>
</span><span class='line'>[3] pry (main)&gt; pl 3..5
</span><span class='line'>"Hello Liquid Snake"
</span><span class='line'>"Konichiwa Liquid Snake"
</span><span class='line'>"Hola Liquid Snake"
</span><span class='line'>=&gt; "Hola Liquid Snake"</span></code></pre></td></tr></table></div></figure>


<p>Simple right?</p>

<h3>Alias &lsquo;jk&rsquo; for &lsquo;exit!&rsquo;</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Pry::Commands.block_command 'jk', "Alias for 'exit!'" do
</span><span class='line'>  exit
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>With this command I can type <code>jk</code> to exit in the same way that you can type <code>exit!</code>. Combined with using <code>CTRL + D</code> to step through breakpoints it feels nice and quick to enter a binding, check a variable, jump to a different breakpoint to check it again and exit out.</p>

<h2>The Edit Command and Your Default Editor</h2>

<p>The <code>edit</code> command is super useful for quickly editing code in a heavy pry session without losing possible variables or methods. Here&rsquo;s how to setup your default editor, simply replace &ldquo;vim&rdquo; with the editor of your choice:</p>

<p><code>Pry.config.editor = "vim"</code></p>

<p>Here&rsquo;s an example of using edit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1] pry (main)&gt; def hello
</span><span class='line'>[1] pry (main)*   puts "Hello"
</span><span class='line'>[1] pry (main)* end
</span><span class='line'>=&gt; :hello
</span><span class='line'>[2] pry (main)&gt; edit hello</span></code></pre></td></tr></table></div></figure>


<p>Vim opens for editing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 def hello
</span><span class='line'>2   puts "Hello"
</span><span class='line'>3 end</span></code></pre></td></tr></table></div></figure>


<p>We add a line of code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1 def hello
</span><span class='line'>2   puts "Hello,"
</span><span class='line'>3   puts "Mr. Bond"
</span><span class='line'>4 end</span></code></pre></td></tr></table></div></figure>


<p>After saving and closing Vim, we return back to pry:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>=&gt; :hello
</span><span class='line'>[3] pry (main)&gt; show-source hello
</span><span class='line'>
</span><span class='line'>From: (pry) @ line 4:
</span><span class='line'>Owner: Object
</span><span class='line'>Visibility: public
</span><span class='line'>Number of lines: 4
</span><span class='line'>
</span><span class='line'>def hello
</span><span class='line'>  puts "Hello,"
</span><span class='line'>  puts "Mr. Bond"
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>[4] pry (main)&gt; hello
</span><span class='line'>Hello,
</span><span class='line'>Mr. Bond
</span><span class='line'>=&gt; nil</span></code></pre></td></tr></table></div></figure>


<h2>Prompt Name</h2>

<p>This command can be used in combination with having a <code>.pryrc</code> in each project folder that you&rsquo;re working on. This would let you see the project name as your pry prompt like so:</p>

<p><code>[1] my_project (main)&gt;</code></p>

<p>Otherwise, if you use the <code>.pryrc</code> in your root directory, it&rsquo;ll be applied globally. I decided I wanted to make pry look a little more awesome so I stuck an emoji in there. Here&rsquo;s the command you use:</p>

<p><code>Pry.config.prompt_name = "🙏 "</code></p>

<p><em>Note: I put an extra space on the end so it&rsquo;s centered.</em></p>

<p>Now my prompt looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1] 🙏(main)&gt; def pray
</span><span class='line'>[1] 🙏(main)*   puts "let's hope this works"
</span><span class='line'>[1] 🙏(main)* end
</span><span class='line'>=&gt; :pray
</span><span class='line'>[2] 🙏(main)&gt; pray
</span><span class='line'>let's hope this works
</span><span class='line'>=&gt; nil
</span><span class='line'>[3] 🙏(main)&gt;</span></code></pre></td></tr></table></div></figure>


<h2>That&rsquo;s It</h2>

<p>I&rsquo;m continuing to try and find ways to customize pry further to improve productivity or make it look awesome. If you&rsquo;re interested in other ways you can customize pry, check out their <a href="https://github.com/pry/pry/wiki/Customization-and-configuration">guide on github.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Change Your iTerm Prompt to Emoji]]></title>
    <link href="http://trayo.github.io/blog/2014/11/23/change-your-iterm-prompt-to-emoji/"/>
    <updated>2014-11-23T16:52:58-07:00</updated>
    <id>http://trayo.github.io/blog/2014/11/23/change-your-iterm-prompt-to-emoji</id>
    <content type="html"><![CDATA[<p>Hello and welcome to my tutorial on how to further
customize your iTerm. This tutorial follows
<a href="http://yoderbacon.com/blog/2014/10/22/how-to-customize-iterm/">my previous tutorial</a>
on how to customize the colors and background of iTerm to
make it more visually pleasing.</p>

<p>In this tutorial we are going to change our prompt to
have an emoji instead of a dollar sign ($), which can
be seen in the following screenshot.</p>

<p>When we left off in the last tutorial we ended up with
a terminal window similar to this:</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_change_prompt/1_before.png" width="600" title="'Still awesome!'" ></p>

<h2>Let&rsquo;s do that change thing!</h2>

<p>The first thing you&rsquo;re going to want to do is open your
bash profile. I&rsquo;m also assuming you have one made already
are, at least, mildly aware that it exists. Open up iTerm
and navigate to your root directory. If terminal hasn&rsquo;t
opened in your root directory the easiest way to get
there is to type <code>cd</code> in and push enter.</p>

<p>From your root directory, open up your bash profile in
Text Edit, the built in Apple text editor. The simple way
to do this is to type:
<code>open .bash_profile</code>
in your terminal. You should get something like the
following:</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_change_prompt/3_open_bash.png" width="700" title="'So scary!'" ></p>

<p>In this file you&rsquo;re going to look for <code>\$</code>. For me it was
at the bottom of the file. You can also find it doing a
search with <code>⌘+F</code>.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_change_prompt/4_text_edit_dollar.png" width="700" title="'Did you find it?'" ></p>

<p>Once you find it, highlight the leading escape <code>\</code> and
the <code>$</code>. Then open up the Apple special characters
menu with <code>^ ⌘ Space</code> or by finding it at the bottom of
the edit menu.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_change_prompt/5_special_characters.png" width="700" title="'Did you find it?'" ></p>

<p>This will open up the built Apple menu with special
characters and emoji. Here you can select any emoji
you&rsquo;d like, but, obviously, pizza is the best emoji
and it&rsquo;ll be the one I&rsquo;ll be selecting.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_change_prompt/6_special_pizza.png" width="700" title="'My spirit animal.'" ></p>

<p>Your bash profile should now have your emoji in it!</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_change_prompt/7_text_edit_pizza.png" width="700" title="'Yup, definitely the best.'" ></p>

<p>I <em>highly</em> recommend adding a space or two after the
emoji, otherwise you may end typing inside the emoji.<br/>
Also, the reason I recommend using Apple&rsquo;s TextEdit
is because if you ended up using Atom or another
text editor, you&rsquo;re emoji might end up look like the
following:</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_change_prompt/8_atom_emoji.png" width="700" title="'So sad.'" ></p>

<h2>Final Product</h2>

<p>Open a new tab or iTerm window and it should look as
awesome as this:</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_change_prompt/9_final_pizza.png" width="700" title="'Wow. Such pizza. Very emoji. So amaze.'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Customize iTerm]]></title>
    <link href="http://trayo.github.io/blog/2014/10/22/how-to-customize-iterm/"/>
    <updated>2014-10-22T19:12:24-07:00</updated>
    <id>http://trayo.github.io/blog/2014/10/22/how-to-customize-iterm</id>
    <content type="html"><![CDATA[<p>Hello!<br/>
Welcome to my tutorial on customizing iTerm!
In this tutorial I&rsquo;m going to show you the basics of importing color schemes,
customizing those schemes and setting up a background. The shot below is our
destination final product.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/20_final_shot_fullscreen.png" width="850" title="'So awesome!'" ></p>

<h2>Let&rsquo;s get started!</h2>

<p>Here&rsquo;s what my terminal looked like when I started, with a shot of vim for good measure:</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/2_term_default.png" width="375" title="'So boring!'" >
<img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/1_term_default_vim.png" width="350" title="'Kind of cool, but still not super cool.'" ></p>

<p>A quick <a href="http://goo.gl/Y1A32Q">google search</a> will show some
results for awesome color schemes already made by the community.<br/>
We&rsquo;re going to use the schemes available at <a href="http://iterm2colorschemes.com/">iterm2colorschemes.com</a>
since they have a bunch of ready made schemes available.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/3_theme_examples.png" width="400" title="'Mathematical!'" ></p>

<p>When you find one you like we&rsquo;re going to clone
<a href="https://github.com/mbadolato/iTerm2-Color-Schemes">the repository</a> off of Github. The files
aren&rsquo;t very large and you&rsquo;ll have them readily available for quickly switching between colors.</p>

<p><img class="top" src="http://i.imgur.com/N1p1G40.png" width="400" title="'ALL THE THINGS'" ></p>

<p>Open up that terminal and navigate to a directory where you would like to clone the repo.
I used my Documents folder.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd Documents/  
</span><span class='line'>$ git clone https://github.com/mbadolato/iTerm2-Color-Schemes  </span></code></pre></td></tr></table></div></figure>


<p>The creators of the repository were kind enough to include an awesome terminal command
that will let you cycle through all the colors and find one that you like. Simply
enter this command in your terminal:
<code>tools/preview.rb schemes/*</code></p>

<p>And it will cycle through the schemes when you push a button on your keyboard. You can
exit the cycle by hitting <code>ctrl + C</code> when you find one that you want to import.</p>

<p>Still in terminal, open up preferences. This can be done either one of two ways:<br/>
from the menu bar under iTerm > Preferences<br/>
or use the keyboard shortcut ( ⌘ + , ) .</p>

<p>Once you&rsquo;re in the preferences window, click on the <em>profiles</em> button.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/4_preferences.png" width="800"></p>

<p>Then click on the <em>colors</em> tab.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/5_profiles.png" width="800"></p>

<h2>Importing colors!</h2>

<p>At the bottom there is a <em>load presets</em> button that will let us import the color themes
that we cloned.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/6_profiles_color_tab.png" width="800"></p>

<p>In the little drop down window click <em>import</em>.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/7_profiles_color_import.png" width="800"></p>

<p>Choose the theme that you would like to import. You can import as
many as you like, but you don&rsquo;t need to import all of them. You can
find a theme put the command in terminal I put earlier:
<code>tools/preview.rb schemes/*</code>
that will cycle you through the colors.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/8_file_itermcolors.png" width="800"></p>

<p>The theme you choose will then appear in the <em>load presets</em> drop down where you can select it.
It should reflect immediately because we are working on the default profile.</p>

<h2>If it didn&rsquo;t work right away:</h2>

<p>If for some reason it didn&rsquo;t update immediately, exit preferences and open up the profile
chooser by hitting ( ⌘ + i ). You will get the following window.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/17_command_eye.png" width="500"></p>

<p>Select the profile that you are working with. If you didn&rsquo;t create a profile, then your
profile will be the one available called <em>default</em>. Then choose <em>change profile</em>.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/18_change_profile.png" width="600"></p>

<p>Now we should see our colors change! Woo!</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/10_still_pink.png" width="400"></p>

<h2>Customize a little more!</h2>

<p>In the <em>colors tab</em> in <em>preferences</em> there are some color boxes that change the overall
colors. The background box here is used you want to change your background color, but at the end of the tutorial I
will show you how to select a wallpaper instead of having a plain solid color for a background.</p>

<p>The bar for me that is pink with the time on it didn&rsquo;t change and doesn&rsquo;t quite match the rest
of the colors in the scheme so it becomes a prime candidate for customizing.</p>

<p>The colors back on <em>preferences</em> correspond directly to what is seen on screen and this is what
the scheme is changing.<br/>
Of the two magenta boxes, the one I want is on the left.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/11_change_magenta.png" width="800"></p>

<p>The following window shows up when it&rsquo;s clicked. The tabs at the top of this window have some
different ways to pick colors. I used the color wheel, but the color palette tab in the middle
is an awesome source too.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/12_under_middle_line.png" width="400"></p>

<p>If you use the color wheel, I recommend keeping the arrow on the bar to the right of the color
wheel slightly under the middle line, but it will vary based on your preferences and scheme.<br/>
Now we have a new color for the bar.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/13_new_bar_color.png" width="400"></p>

<h2>If it didn&rsquo;t work right away:</h2>

<p>Again, if for some reason it didn&rsquo;t update immediately, exit preferences and open up the profile
chooser by hitting ( ⌘ + i ). You will get the following window.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/17_command_eye.png" width="500"></p>

<p>Select the profile that you are working with. If you didn&rsquo;t create a profile, then your
profile will be the one available called <em>default</em>. Then choose <em>change profile</em>.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/18_change_profile.png" width="600"></p>

<h2>Customize the background image!</h2>

<p>Back in the <em>Preferences</em> and under <em>Profiles</em>, open the <em>Window</em> tab.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/14_click_window.png" width="600"></p>

<p>Click on the little check box for <em>Background Image</em> to open the window where you can select your background.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/15_click_background_box.png" width="600"></p>

<p>Depending on your background&rsquo;s resolution, I recommend turing on <em>Tile Image</em>.</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/16_tile_image.png" width="600"></p>

<p>If your background is the same resolution of you monitor or larger, this will prevent the background image from scaling when the window size changes.</p>

<h2>Final product!</h2>

<p>This is again the final product. It&rsquo;s more pleasing that just a plain black background and some white text.
You can also see the way tiling the image works when the window is half size and full size.</p>

<p>Thank you for reading!</p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/19_final_shot_small.png" width="600"></p>

<p><img class="top" src="https://raw.githubusercontent.com/trayo/trayo.github.io/source/source/_posts/images_customize_iterm/20_final_shot_fullscreen.png" width="600"></p>
]]></content>
  </entry>
  
</feed>
