<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pry, | Yoder Bacon]]></title>
  <link href="http://trayo.github.io/blog/categories/pry/atom.xml" rel="self"/>
  <link href="http://trayo.github.io/"/>
  <updated>2015-06-07T15:06:01-06:00</updated>
  <id>http://trayo.github.io/</id>
  <author>
    <name><![CDATA[Travis Yoder]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Customizing Pry]]></title>
    <link href="http://trayo.github.io/blog/2015/05/23/customizing-pry/"/>
    <updated>2015-05-23T11:20:31-06:00</updated>
    <id>http://trayo.github.io/blog/2015/05/23/customizing-pry</id>
    <content type="html"><![CDATA[<p>In this tutorial I&rsquo;m going to be showing off a couple different ways that I customized the <a href="https://github.com/pry/pry">pry gem</a>.</p>

<p>You&rsquo;ll need to add a <code>.pryrc</code> file to your root directory. You can do it with this command: <code>touch ~/.pryrc</code>.</p>

<h2>Block Commands</h2>

<p>Pry block commands are a way for you to add shortcuts to every pry session.</p>

<p>The first one I set up was for the built in <code>play</code> method that pry supports. I found myself copying lines of code from a <code>binding.pry</code> breakpoint that I was in and pasting them line by line to see the result of the output. This can be slow and painful when there&rsquo;s a lot of code in a method.</p>

<p>The <code>play</code> command allows you to play a line of code or lines of code using a range of numbers, using the flag <code>-l</code>. Here is an example:</p>

<pre><code>=&gt; 1: require "pry"; binding.pry
   2:
   3: p "Hello #{name}"
   4: p "Konichiwa #{name}"
   5: p "Hola #{name}"
   6:

[1] pry (main)&gt; play -l 3
NameError: undefined local variable or method `name' for main:Object
from (pry):1:in `&lt;main&gt;'

[2] pry (main)&gt; name = "travis"
=&gt; "travis"

[3] pry (main)&gt; play -l 3
"Hello travis"
=&gt; "Hello travis"

[4] pry (main)&gt; name = "Solid Snake"
=&gt; "Solid Snake"

[5] pry (main)&gt; play -l 3..5
"Hello Solid Snake"
"Konichiwa Solid Snake"
"Hola Solid Snake"
=&gt; "Hola Solid Snake"
</code></pre>

<p>This is where block commands come in to play. I wanted to make it slightly easier to type <code>play -l</code> so I added this to my <code>.pryrc</code>:</p>

<pre><code>Pry::Commands.block_command 'pl', "Alias for 'play -l'" do |lines|
  _pry_.run_command("play -l #{lines}")
end
</code></pre>

<p><code>Pry::Commands.block_command 'pl'</code> says to make a command with the name &lsquo;pl&rsquo;.<br/>
<code>"Alias for 'play -l'"</code> is a description of the command.<br/>
You can have the method take parameters with <code>do |lines|</code>.<br/>
<code>_pry_.run_command</code> uses the current pry instance to run a pry command.<br/>
And then we tell it to run the <code>play -l</code> command with a line or range of lines.</p>

<p><em>Note: the code within the block is actually plain ruby code</em></p>

<p>Now in our example we can do:</p>

<pre><code>=&gt; 1: require "pry"; binding.pry
   2:
   3: p "Hello #{name}"
   4: p "Konichiwa #{name}"
   5: p "Hola #{name}"
   6:

[1] pry (main)&gt; pl 3
NameError: undefined local variable or method `name' for main:Object
from (pry):1:in `&lt;main&gt;'

[2] pry (main)&gt; name = "Liquid Snake"
=&gt; "Liquid Snake"

[3] pry (main)&gt; pl 3..5
"Hello Liquid Snake"
"Konichiwa Liquid Snake"
"Hola Liquid Snake"
=&gt; "Hola Liquid Snake"
</code></pre>

<p>Simple right?</p>

<h3>Alias &lsquo;jk&rsquo; for &lsquo;exit!&rsquo;</h3>

<pre><code>Pry::Commands.block_command 'jk', "Alias for 'exit!'" do
  exit
end
</code></pre>

<p>With this command I can type <code>jk</code> to exit in the same way that you can type <code>exit!</code>. Combined with using <code>CTRL + D</code> to step through breakpoints it feels nice and quick to enter a binding, check a variable, jump to a different breakpoint to check it again and exit out.</p>

<h2>The Edit Command and Your Default Editor</h2>

<p>The <code>edit</code> command is super useful for quickly editing code in a heavy pry session without losing possible variables or methods. Here&rsquo;s how to setup your default editor, simply replace &ldquo;vim&rdquo; with the editor of your choice:</p>

<p><code>Pry.config.editor = "vim"</code></p>

<p>Here&rsquo;s an example of using edit:</p>

<pre><code>[1] pry (main)&gt; def hello
[1] pry (main)*   puts "Hello"
[1] pry (main)* end
=&gt; :hello
[2] pry (main)&gt; edit hello
</code></pre>

<p>Vim opens for editing:</p>

<pre><code>1 def hello
2   puts "Hello"
3 end
</code></pre>

<p>We add a line of code:</p>

<pre><code>1 def hello
2   puts "Hello,"
3   puts "Mr. Bond"
4 end
</code></pre>

<p>After saving and closing Vim, we return back to pry:</p>

<pre><code>=&gt; :hello
[3] pry (main)&gt; show-source hello

From: (pry) @ line 4:
Owner: Object
Visibility: public
Number of lines: 4

def hello
  puts "Hello,"
  puts "Mr. Bond"
end

[4] pry (main)&gt; hello
Hello,
Mr. Bond
=&gt; nil
</code></pre>

<h2>Prompt Name</h2>

<p>This command can be used in combination with having a <code>.pryrc</code> in each project folder that you&rsquo;re working on. This would let you see the project name as your pry prompt like so:</p>

<p><code>[1] my_project (main)&gt;</code></p>

<p>Otherwise, if you use the <code>.pryrc</code> in your root directory, it&rsquo;ll be applied globally. I decided I wanted to make pry look a little more awesome so I stuck an emoji in there. Here&rsquo;s the command you use:</p>

<p><code>Pry.config.prompt_name = "üôè "</code></p>

<p><em>Note: I put an extra space on the end so it&rsquo;s centered.</em></p>

<p>Now my prompt looks like this:</p>

<pre><code>[1] üôè(main)&gt; def pray
[1] üôè(main)*   puts "let's hope this works"
[1] üôè(main)* end
=&gt; :pray
[2] üôè(main)&gt; pray
let's hope this works
=&gt; nil
[3] üôè(main)&gt;
</code></pre>

<h2>That&rsquo;s It</h2>

<p>I&rsquo;m continuing to try and find ways to customize pry further to improve productivity or make it look awesome. If you&rsquo;re interested in other ways you can customize pry, check out their <a href="https://github.com/pry/pry/wiki/Customization-and-configuration">guide on github.</a></p>
]]></content>
  </entry>
  
</feed>
